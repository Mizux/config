# Prompt
autoload -U colors && colors

local c_red="%{$fg[red]%}"
local c_green="%{$fg[green]%}"
local c_blue="%{$fg[blue]%}"
local c_yellow="%{$fg[yellow]%}"
local c_reset="%{$reset_color%}"

local blue_op="%{$fg[blue]%}[%{$reset_color%}"
local blue_cp="%{$fg[blue]%}]%{$reset_color%}"

local path_p="${blue_op}${c_yellow}%~${c_reset}${blue_cp}"
local user_host="${c_red}%n${c_reset}@${c_yellow}%m${c_reset}"
local ret_status="${blue_op}%(?,${c_green}%?${c_reset},${c_red}%?${c_reset})${blue_cp}"
local hist_no="${blue_op}%h${blue_cp}"
local smiley="${blue_op}%(?,${c_green}^v^${c_reset},${c_red}>_<${c_reset})${blue_cp}"
PROMPT="${ret_status}─${path_p}
${smiley}─${user_host} %#"
local cur_cmd="${blue_op}%_${blue_cp}"
PROMPT2="${cur_cmd}> "

bindkey -e
export TERM=xterm-256color
export EDITOR=vim

# PATH
export PATH=~/.local/bin:$PATH

# ANDROID
export JAVA_HOME=/usr/lib/jvm/default
export ANDROID_NDK_ROOT=~/android/android-ndk-r10e
export ANDROID_SDK_ROOT=~/android/android-sdk-linux
export ANDROID_QT_ROOT=~/Qt/5.5/android_armv7
export PATH=$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:$PATH
export PATH=~/Qt/5.5/gcc_64/bin:$PATH
export PATH=~/Qt/Tools/QtCreator/bin:$PATH

# Alias
alias ls='ls --group-directories-first'
alias lsc='ls --color'
alias l1='ls -1'
alias l1c='l1 --color'
alias ll='ls -lh'
alias llc='ll --color'
alias la='ls -lha'
alias lac='la --color'

# History
HISTFILE=~/.histfile
HISTSIZE=8192
SAVEHIST=8192
setopt append_history
setopt hist_expire_dups_first
setopt hist_ignore_space
setopt inc_append_history
setopt share_history

# Arrow History Management
autoload -Uz up-line-or-beginning-search
autoload -Uz down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey '\eOA' up-line-or-beginning-search
bindkey '\e[A' up-line-or-beginning-search
bindkey '\eOB' down-line-or-beginning-search
bindkey '\e[B' down-line-or-beginning-search

# Completion
setopt autocd
zstyle :compinstall filename '~/.zshrc'
autoload -Uz compinit && compinit

function build_config {
if [ -d build ]; then
	rm -rf build
fi
mkdir build && cd build
cmake -GNinja ..
cd ..
}
alias qc='build_config'

function build_make {
if [ -d build ]; then
	cd build
	ninja $1
	cd ..
else
	echo "build dir missing, run build_config first..."
	build_config
	build_make $1
fi
}
alias qm='build_make'

function build_format {
find .  -path ./build -prune -o -type f -iname "*.[hc]pp" -exec echo "Formatting {}" \; -exec clang-format -style=file -i {} \;
}
alias qf='build_format'

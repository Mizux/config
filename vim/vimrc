" May need for Vim (not Neovim) since coc.nvim calculates byte offset by count
" utf-8 byte sequence
set encoding=utf-8
set nocompatible " be iMproved, required
set mouse=a " Use mouse in vim
filetype off " required

" Plugins...
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim' " let Vundle manage Vundle, required
Plugin 'bling/vim-airline' " lean & mean status/tabline
Plugin 'flazz/vim-colorschemes' " one colorscheme pack to rule them all!
Plugin 'ryanoasis/vim-devicons' " Add icons
Plugin 'preservim/nerdtree' " File explorer
Plugin 'Xuyuanp/nerdtree-git-plugin' " git status in NerdTree
Plugin 'preservim/tagbar' " displays tags in a window, ordered by scope
Plugin 'jlanzarotta/bufexplorer' " convenient buffer explorer
"Plugin 'severin-lemaignan/vim-minimap' " Sublime minimap equivalent
Plugin 'airblade/vim-gitgutter' " shows a git diff/stage/revert using sign column
Plugin 'vim-syntastic/syntastic' " Syntax checking hacks

Plugin 'Valloric/YouCompleteMe' " A code-completion engine
Plugin 'rdnetto/YCM-Generator' " Generate YCM file using :YcmGenerateConfig
"Plugin 'neoclide/coc.nvim' " Nodejs support
call vundle#end() " required
filetype plugin indent on " required
" :PluginInstall - installs plugins; append `!` to update or just :PluginUpdate

" Configuration
set number | set signcolumn=yes | set ruler | set cursorline
set nobackup | set nowritebackup " Some langage servers have issues with backup files
syntax enable | set showmatch
set hlsearch | set hlsearch
set ignorecase | set smartcase
set foldmethod=syntax | set foldlevelstart=99 | set foldenable
let g:xml_syntax_folding=1
let g:sh_fold_enabled=5
set updatetime=300 " default is 4000ms

" Theme
colorscheme mouse | set background=dark | set guifont=DejaVu\ Sans\ Mono\ Nerd\ Font\ 11 | set termguicolors

" Status line
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Auto Format
set autoindent | set smartindent
set textwidth=80
set tabstop=2 | set shiftwidth=2 | set softtabstop=2 | set expandtab

" sessions options
set ssop-=options | set ssop-=folds

set backspace=indent,eol,start " backspace didn't work in insert mode
set belloff=all " disable bell

" Key Binding
nnoremap <silent> <C-e> :Explore<CR> " open built-in TreeExplorer
nnoremap <silent> <C-n> :NERDTreeToggle<CR> " open NerdTree
nnoremap <silent> <C-b> :BufExplorer<CR> " open BufExplorer
nnoremap <silent> <C-t> :TagbarToggle<CR> " open TagBar
"nnoremap <silent> <C-m> :MinimapToggle<CR> " open Minimap

" CTags Completion (C-F8 generate)
set tags=./tags;
map <C-F8> :!ctags -R --sort=yes --c++-kinds=+pl --fields=+iaS --extra=+q .<CR>

"Toggle YouCompleteMe on and off with F3
function Toggle_ycm()
    if g:ycm_show_diagnostics_ui == 0
        let g:ycm_auto_trigger = 1
        let g:ycm_show_diagnostics_ui = 1
        :YcmRestartServer
        :e
        :echo "YCM on"
    elseif g:ycm_show_diagnostics_ui == 1
        let g:ycm_auto_trigger = 0
        let g:ycm_show_diagnostics_ui = 0
        :YcmRestartServer
        :e
        :echo "YCM off"
    endif
endfunction
map <F3> :call Toggle_ycm() <CR>

" NerdTree style
" the ignore patterns are regular expression strings and seprated by comma
let NERDTreeIgnore = ['\.pyc$', '^__pycache__$']
" disable help line
let NERDTreeMinimalUI = 1
" augroup nerdtree_open
"     autocmd!
"     autocmd VimEnter * NERDTree | wincmd p
" augroup END

" load Doxygen syntax per default
au BufNewFile,BufRead *.dox set filetype=doxygen
let g:load_doxygen_syntax = 1
let g:doxygen_enhanced_colour = 0
let doxygen_my_rendering = 1
let doxygen_javadoc_autobrief = 0
let doxygen_end_punctuation = '[.]'
" SVG load xml syntax for indentation
au BufNewFile,BufRead *.svg set filetype=xml
" SWIG load swig syntax for indentation
au BufNewFile,BufRead *.i set filetype=swig
" .NET load xml syntax for indentation
au BufNewFile,BufRead *.fsproj set filetype=xml

" Remove trailing whitespace
function! CleanWhiteSpace()
  " Don't strip on these filetypes
  if &ft =~ 'markdown\|perl\|diff'
    return
  endif
  let _s=@/
  let l = line(".")
  let c = col(".")
  :%s/\s\+$//e
  let @/=_s
  call cursor(l, c)
endfunction()
" Remove trailing whitespaces when saving:
autocmd bufwritepre * call CleanWhiteSpace()
